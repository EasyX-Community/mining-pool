type User {
    id: ID!
    name: String
    email: String
    wallets: Wallet @hasMany
    createdAt: DateTime! @rename(attribute: "created_at")
    updatedAt: DateTime! @rename(attribute: "updated_at")
}

extend type Query @group(middleware: ["auth:api"]) {
  users(count: Int, page: Int): [User!]! @paginate(type: "paginator" model: "App\\Models\\User")
  user(id: ID @eq): User @find(model: "App\\Models\\User")
}

extend type Mutation @group(middleware: ["auth:api"]) {
    updateUser(
        id: ID @rules(apply: ["required"])
        name: String
        email: String @rules(apply: ["email"])
    ): User @update(model: "App\\Models\\User")
    deleteUser(
        id: ID @rules(apply: ["required"])
    ): User @delete(model: "App\\Models\\User")
}

extend type Mutation {
    createUser(
        name: String @rules(apply: ["required"])
        email: String @rules(apply: ["required", "email", "unique:users,email"])
        password: String @rules(apply: ["required", "min:6"]) @bcrypt
    ): User @create(model: "App\\Models\\User")
}